{
    "title": "Руководство по код-ревью",
    "sections": [
        {
            "title": "Проверяем соответствие регламентам",
            "items": [
                {
                    "title": "Обязательные решения при разработке",
                    "details": [
                        "Для всех проектов",
                        "OpenShift",
                        "WPF"
                    ]
                },
                {
                    "title": "Руководство по стилю C#",
                    "details": []
                }
            ]
        },
        {
            "title": "На что обращаем внимание",
            "items": [
                {
                    "title": "Проект",
                    "details": [
                        "NuGet пакеты должны быть обновлены до последних версий.",
                        "Код не должен содержать неразрешенных TODO.",
                        "Закомментированный или неиспользуемый код должен быть удалён."
                    ]
                },
                {
                    "title": "Код",
                    "details": [
                        "Код с атрибутом Obsolete должен быть удален.",
                        "Не должно быть лишних зависимостей."
                    ]
                }
            ]
        },
        {
            "title": "Архитектура и дизайн методов",
            "examples": [
                {
                    "code": "services.AddScoped<IMnemonicStationService, MnemonicStationService>();",
                    "explanation": "Неправильная регистрация сервисов в IoC контейнере."
                },
                {
                    "code": "public IList<string>? GetHeaders() { return null; }",
                    "explanation": "Возврат null вместо пустой коллекции."
                }
            ]
        },
        {
            "title": "Частые ошибки",
            "items": [
                {
                    "title": "Общие",
                    "examples": [
                        {
                            "code": "Log.Error(ex, ex.Message);",
                            "explanation": "Сообщение будет задублировано."
                        },
                        {
                            "code": "Log.Error(ex, \"\");",
                            "explanation": "Без дублирования."
                        }
                    ]
                },
                {
                    "title": "LINQ",
                    "examples": [
                        {
                            "code": "while (i < fMPCompany.CompanyTab.Length) {...}",
                            "explanation": "Использование Skip().Take(), вместо Chunk()."
                        }
                    ]
                }
            ]
        },
        {
            "title": "Entity Framework",
            "items": [
                {
                    "title": "Использование асинхронных методов",
                    "details": [
                        "Удаление сущностей в цикле",
                        "Лишняя материализация при удалении элементов."
                    ]
                }
            ]
        },
        {
            "title": "Примеры хорошего и плохого тона",
            "sections": [
                {
                    "title": "Именование переменных",
                    "examples": [
                        {
                            "good": "int userAge = 30;",
                            "bad": "int a = 30;",
                            "explanation": "Имя переменной 'userAge' четко указывает на ее предназначение."
                        },
                        {
                            "good": "string customerName = \"John Doe\";",
                            "bad": "string cn = \"John Doe\";",
                            "explanation": "Ясное имя переменной улучшает читаемость кода."
                        }
                    ]
                },
                {
                    "title": "Комментарии",
                    "examples": [
                        {
                            "good": "// Проверяем, что пользователь существует в базе данных.",
                            "bad": "// Проверка.",
                            "explanation": "Хороший комментарий предоставляет четкое объяснение цели кода."
                        },
                        {
                            "good": "if (user.IsActive) { /* Активный пользователь */ }",
                            "bad": "if (user.IsActive) { /* делаем что-то */ }",
                            "explanation": "Конкретные комментарии лучше объясняют, что делает код."
                        }
                    ]
                },
                {
                    "title": "Структура кода",
                    "examples": [
                        {
                            "good": "public void ProcessOrder(Order order) { /* обработка заказа */ }",
                            "bad": "public void P(O o) { /* обработка */ }",
                            "explanation": "Четкие имена методов улучшают понимание кода."
                        },
                        {
                            "good": "for (int i = 0; i < items.Count; i++) { /* код */ }",
                            "bad": "for (int i = 0; i < items.Count; i++) { /* do something */ }",
                            "explanation": "Конкретное описание действия дает больше информации."
                        }
                    ]
                },
                {
                    "title": "Обработка ошибок",
                    "examples": [
                        {
                            "good": "try { /* код */ } catch (Exception ex) { Log.Error(ex, \"Ошибка при обработке\"); }",
                            "bad": "try { /* код */ } catch { /* Игнорируем ошибку */ }",
                            "explanation": "Корректная обработка исключений позволяет лучше отслеживать проблемы."
                        },
                        {
                            "good": "if (result == null) { throw new ArgumentNullException(nameof(result)); }",
                            "bad": "if (result == null) { /* ничего не делать */ }",
                            "explanation": "Проверка аргументов помогает избежать потенциальных ошибок."
                        }
                    ]
                }
            ]
        }        
    ]
}
